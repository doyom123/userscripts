// ==UserScript==
// @name     Garmin Connect Workout
// @namespace https://connect.garmin.com
// @include https://connect.garmin.com/modern/workout/*
// @version  1
// @grant    none
// @require https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js 
// ==/UserScript==



idList = []
cloned = false
workoutType = null
workoutSelect = {
  "workout-step-warm": 0,
  "workout-step-run": 1,
  "workout-step-recover": 2,
  "workout-step-rest": 3,
  "workout-step-cool": 4,
  "workout-step-other": 5
}

durationSelect = {
  1:"step-duration-time",
  2:"step-duration-distance",
  3:"step-duration-lap-button",
  4:"step-duration-cal",
  5:"step-duration-hr"
}
durationIdx = null
durationTime = null
durationUnit = null

//#duration-distance
durationValue = null
durationOption = null

targetExists = false
stepTargetValue = null
stepTargetIdx = null
heartRateIdx = null
targetValue = null
targetFrom = null
targetTo = null

var observer = new MutationObserver(function(mutations) {
  mutations.forEach(function(mutation) {
    if (!mutation.addedNodes) return

    for (var i = 0; i < mutation.addedNodes.length; i++) {
      // do things to your newly added nodes here
      
      var node = mutation.addedNodes[i]
      
      if(node.classList.contains('workout-edit')) {
        var editor = document.querySelector('.workout-editor')
        var steps = editor.querySelectorAll('.workout-step')
        for(let i = 0; i < steps.length; i++) {
          //console.log(steps[i])
          //Add id
          idList.push(getIdNum(steps[i]))

          //add button here
          let div = document.createElement('span')
          div.classList.add('pull-left')
         
          let clone = document.createElement('a')
          clone.classList.add('cloneBtn')
          clone.innerHTML = 'c'
          div.append(clone)
          
          clone.onclick = function() {
            console.log('event listener')
            let currStep = this.parentNode.parentNode
            workoutType = currStep.classList[1]
            console.log(workoutType)
            
            //TODO: change these to value instead of index
            let duration = currStep.querySelector('.select-step-duration')
            console.log('duration id = ' + duration.selectedIndex)
            durationIdx = duration.selectedIndex
            let durationDiv = currStep.querySelector('.step-duration')
            switch(duration.value) {
              case 'time':
                durationValue = durationDiv.querySelector('input[name="duration-time"]').value
                durationOption = null
                break
              case 'distance':
                durationValue = durationDiv.querySelector('input[name="duration-distance"]').value
                console.log('dist')
                durationOption = durationDiv.querySelector('select[name="distanceUnit"]').value
  
                break
              case 'lap.button':
                durationValue = null
                durationOption = null
                break
              case 'calories':
                durationValue = durationDiv.querySelector('input[name="duration-calories"]').value
                durationOption = null
                break
              case 'heart.rate.zone':
                durationOption = durationDiv.querySelector('select[name="heart-rate-select"]').value
                durationValue = durationDiv.querySelector('input[name="duration-heart-rate-custom"]').value
                break
              default:
                durationValue = null
                durationOption = null
                break
            }
            
            var stepTargetSelect = currStep.querySelector('.select-step-target')
            stepTargetValue = stepTargetSelect.value
            stepTargetIdx = stepTargetSelect.selectedIndex
            console.log('stepTargetIdx ' + stepTargetIdx)
            var stepTargetDiv = currStep.querySelector('.step-target')
            addMore = currStep.querySelector('#add-step-target')
            if(addMore.classList.contains('hide') && stepTargetSelect.value != 'no.target') {

              targetValue = stepTargetSelect.value
 
              switch(targetValue) {
                case 'pace.zone':
                  targetExists = true
                  //console.log('pace.zone')
                  targetFrom = stepTargetDiv.querySelector('input[name="target-pace-from"]').value
                  targetTo = stepTargetDiv.querySelector('input[name="target-pace-to"]').value
                  break
                case 'speed.zone':
                  targetExists = true
                  targetFrom = stepTargetDiv.querySelector('input[name="target-speed-from"]').value
                  targetTo = stepTargetDiv.querySelector('input[name="target-speed-to"]').value
                  break
                case 'cadence':
                  targetExists = true
                  targetFrom = stepTargetDiv.querySelector('input[name="target-cadence-from"]').value
                  targetTo = stepTargetDiv.querySelector('input[name="target-cadence-to"]').value
                  break
                case 'heart.rate.zone':
                  targetExists = true
                  heartRateIdx = stepTargetSelect.selectedIndex
                  
                  if(heartRateIdx == 9) {
                    targetFrom = stepTargetDiv.querySelector('input[name="target-heart-rate-custom-from"]').value
                    targetTo = stepTargetDiv.querySelector('input[name="target-heart-rate-custom-to"]').value
                  }
                  break
                default:
                  targetExists = false
                  break
              }
            } else {
              console.log('nottarget')
            }
            
            
            let clonedStep = $(currStep).clone(true, true)

            //clonedStep.attr("id", newId(currStep))
            var newStepBtn = document.getElementById('new-step')
            newStepBtn.click()

            //$(currStep).after(clonedStep)
            //let clonedStep = currStep.cloneNode(true)
          
            //let newStepId = newId(clonedStep)
            //clonedStep.id = newStepId
            //currStep.parentNode.insertBefore(clonedStep, currStep.nextSibling)

            enableSave()
           
          }
          steps[i].append(div)
          
          
        }
        console.log(editor) 
      }
      
      if(node.classList.contains('workout-step')) {
        let prevWorkoutType = node.classList[1]
        
        node.classList.replace(prevWorkoutType, workoutType)
        
        let workoutIdx = workoutSelect[workoutType]
        let stepType = node.querySelector('.select-step-type')
        stepType.selectedIndex = workoutIdx
        
        let duration = node.querySelector('.select-step-duration')
        duration.selectedIndex = durationIdx
        duration.dispatchEvent(new Event('change', { bubbles: true }))
        let durationDiv = node.querySelector('.step-duration')

        switch(duration.value) {
          case 'time': {
            let input = durationDiv.querySelector('input[name="duration-time"]')
            input.value = durationValue
            input.dispatchEvent(new Event('change', { bubbles: true }))
            
          } break
          case 'distance': {
            let input = durationDiv.querySelector('input[name="duration-distance"]') 
            input.value = durationValue
            input.dispatchEvent(new Event('change', { bubbles: true }))
            let option = durationDiv.querySelector('select[name="distanceUnit"]') 
            option.value = durationOption
            option.dispatchEvent(new Event('change', { bubbles: true }))
            console.log('event dispatched')
          } break
          case 'lap.button':
            break
          case 'calories': {
            let input = durationDiv.querySelector('input[name="duration-calories"]')
            input.value = durationValue
            input.dispatchEvent(new Event('change', { bubbles: true }))            
          } break
          case 'heart.rate.zone': {
            let option = durationDiv.querySelector('select[name="heart-rate-select"]')
            option.value = durationOption
            option.dispatchEvent(new Event('change', { bubbles: true }))
            console.log('event dispatched')
            let input = durationDiv.querySelector('input[name="duration-heart-rate-custom"]')
            input.value = durationValue
            input.dispatchEvent(new Event('change', { bubbles: true }))
          } break
          default:
            break
        }
        
        // click addmore
        var stepTargetSelect = node.querySelector('.select-step-target')
        
        console.log('new clone: stepTargetIdx ' + stepTargetIdx)
        var stepTargetDiv = node.querySelector('.step-target')
        

        
        if(targetExists == true) {
           let addMore = node.querySelector('#add-step-target')
           addMore.click()
        }
        stepTargetSelect.selectedIndex = stepTargetIdx
        stepTargetSelect.dispatchEvent(new Event('change', { bubbles: true }));
        stepTargetDiv.dispatchEvent(new Event('change', { bubbles: true }));
        let targetValue = stepTargetSelect.value 
        switch(targetValue) {
          case 'pace.zone': {

            let inputFrom = stepTargetDiv.querySelector('input[name="target-pace-from"]')
            console.log('pace.zone')
            inputFrom.value = targetFrom
            console.log('iv ' + inputFrom.value)
            inputFrom.dispatchEvent(new Event('change', { bubbles: true }))
            let inputTo = stepTargetDiv.querySelector('input[name="target-pace-to"]')
            inputTo.value = targetTo
            console.log('it ' + inputTo.value)
            inputTo.dispatchEvent(new Event('change', { bubbles: true }))
            console.log('finished')
          } break
          case 'speed.zone': {
            let inputFrom = stepTargetDiv.querySelector('input[name="target-speed-from"]')
            inputFrom.value = targetFrom
            inputFrom.dispatchEvent(new Event('change', { bubbles: true }))
            
            let inputTo = stepTargetDiv.querySelector('input[name="target-speed-to"]')
            inputTo.value = targetTo
            inputTo.dispatchEvent(new Event('change', { bubbles: true }))
            console.log('finished')
          } break
          case 'cadence': {
            let inputFrom = stepTargetDiv.querySelector('input[name="target-cadence-from"]')
            inputFrom.value = targetFrom
            inputFrom.dispatchEvent(new Event('change', { bubbles: true }))
            
            let inputTo = stepTargetDiv.querySelector('input[name="target-cadence-to"]')
            inputTo.value = targetTo
            inputTo.dispatchEvent(new Event('change', { bubbles: true }))
            console.log('finished')            
          } break
          case 'heart.rate.zone': {
            console.log('hearratezone')
            
            if(heartRateIdx == 9) {
              let inputFrom = stepTargetDiv.querySelector('input[name="target-heart-rate-custom-from"]')
              inputFrom.value = targetFrom
              inputFrom.dispatchEvent(new Event('change', { bubbles: true }))
              
              let inputTo = stepTargetDiv.querySelector('input[name="target-heart-rate-custom-to"]')
              inputTo.value = targetTo
              inputTo.dispatchEvent(new Event('change', { bubbles: true }))
              console.log('finished')    
            }
          } break
          default:
            break
        }       
      }
      targetExists = false
    }
  })
})

observer.observe(document.body, {
    childList: true
  , subtree: true
  , attributes: false
  , characterData: false
})

//observer.disconnect()

function cloneButton(node) {
  //Create div
  let div = document.createElement('div')
  div.classList.add('step-component')
  let clone = document.createElement('a')
  clone.innherHTML = 'c'
  clone.id = newId(clone)
  return div
}

function getIdNum(node) {
  console.log('getIdNum')
  let num = (node.id).split('-')[2]
  return parseInt(num)
}

function newId(node) {

  var newid = getIdNum(node) + 1
  console.log('newId')
  while(idList.includes(newid)) {
    console.log('increment')
    newid += 1 
  }
  let newidstr = "main-step-" + newid
  console.log(newidstr)
  return newidstr
}

function enableSave() {
  var saveBtn = document.getElementById('save-workout')
  saveBtn.classList.remove('disabled')
}