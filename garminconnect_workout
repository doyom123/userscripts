// ==UserScript==
// @name     Garmin Connect Workout
// @namespace https://connect.garmin.com
// @include https://connect.garmin.com/modern/workout/edit/*
// @version  1
// @grant    none
// ==/UserScript==

//TODO Chaning run type breaks everything!

idList = []

var observer = new MutationObserver(function(mutations) {
  mutations.forEach(function(mutation) {
    if (!mutation.addedNodes) return

    for (var i = 0; i < mutation.addedNodes.length; i++) {
      // do things to your newly added nodes here
      
      var node = mutation.addedNodes[i]
      
      if(node.classList.contains('workout-edit')) {
        var editor = document.querySelector('.workout-editor')
        var steps = editor.querySelectorAll('.workout-step')
        for(let i = 0; i < steps.length; i++) {
          //console.log(steps[i])
          //Add id
          idList.push(getIdNum(steps[i]))
          
          //add button here
          let div = document.createElement('div')
          div.classList.add('step-component')
         
          let clone = document.createElement('a')
          clone.classList.add('cloneBtn')
          clone.innerHTML = 'c'
          div.append(clone)
          clone.onclick = function() {
            console.log('event listener')
            let currStep = this.parentNode.parentNode
            let clonedStep = currStep.cloneNode(true)
            console.log(clonedStep)
            let newStepId = newId(clonedStep)
            clonedStep.id = newStepId
            currStep.parentNode.insertBefore(clonedStep, currStep.nextSibling)
 
            enableSave()
           
          }
          steps[i].append(div)
          
          
        }
        console.log(editor) 
      }
      
      if(node.classList.contains('workout-step')) {
        idList.push(getIdNum(node))
        console.log('workout-step')
        console.log(node)
        var cloneBtn = node.querySelector('.cloneBtn')
        console.log(cloneBtn)
        cloneBtn.onclick = function() {
          console.log('clicked')
          let currStep = this.parentNode.parentNode
          let clonedStep = currStep.cloneNode(true)
          let newStepId = newId(clonedStep)
          clonedStep.id = newStepId
          currStep.parentNode.insertBefore(clonedStep, currStep.nextSibling)
          enableSave()
          
        }

      }
    }
  })
})

observer.observe(document.body, {
    childList: true
  , subtree: true
  , attributes: false
  , characterData: false
})

//observer.disconnect()

function cloneButton(node) {
  //Create div
  let div = document.createElement('div')
  div.classList.add('step-component')
  let clone = document.createElement('a')
  clone.innherHTML = 'c'
  clone.id = newId(clone)
  return div
}

function getIdNum(node) {
  let num = (node.id).split('-')[2]
  return parseInt(num)
}

function newId(node) {

  var newid = getIdNum(node) + 1
  console.log('newId')
  while(idList.includes(newid)) {
    console.log('increment')
    newid += 1 
  }
  let newidstr = "main-step-" + newid
  return newidstr
}

function enableSave() {
  var saveBtn = document.getElementById('save-workout')
  saveBtn.classList.remove('disabled')
}